{"ast":null,"code":"var _jsxFileName = \"/Users/ChristinaGerard/Desktop/personal_projects/TrickyClicks/src/App.js\";\nimport React, { Component } from 'react';\nimport { Row, Col, Container } from 'react-bootstrap'; // Character Images\n\nimport Poca from './images/characters/poca.jpg';\nimport JSmith from './images/characters/john_smith.jpg';\nimport Meeko from './images/characters/meeko.jpg';\nimport Flit from './images/characters/flit.jpg';\nimport GMWillow from './images/characters/gma_willow.jpg';\nimport PHatan from './images/characters/powhatan.jpg';\nimport Nakoma from './images/characters/nakoma.jpg';\nimport Percy from './images/characters/percy.jpg';\nimport Kocoum from './images/characters/kocoum.jpg';\nimport './App.css'; // Components\n\nimport Header from './components/header';\nimport Characters from './components/characters';\nconst log = console.log;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      characters: [{\n        alt: 'Pocahontas',\n        src: Poca,\n        clicked: false,\n        hover: false\n      }, {\n        alt: 'John Smith',\n        src: JSmith,\n        clicked: false,\n        hover: false\n      }, {\n        alt: 'Meeko',\n        src: Meeko,\n        clicked: false,\n        hover: false\n      }, {\n        alt: 'Flit',\n        src: Flit,\n        clicked: false,\n        hover: false\n      }, {\n        alt: 'Grandmother Willow',\n        src: GMWillow,\n        clicked: false,\n        hover: false\n      }, {\n        alt: 'Powhatan',\n        src: PHatan,\n        clicked: false,\n        hover: false\n      }, {\n        alt: 'Nakoma',\n        src: Nakoma,\n        clicked: false,\n        hover: false\n      }, {\n        alt: 'Percy',\n        src: Percy,\n        clicked: false,\n        hover: false\n      }, {\n        alt: 'Kocoum',\n        src: Kocoum,\n        clicked: false,\n        hover: false\n      }],\n      topScore: 0,\n      currentScore: 0\n    };\n\n    this.toggleHover = character => {\n      let characters_copy = this.state.characters;\n      characters_copy.forEach(char => {\n        if (char.alt === character) {\n          char.hover = !char.hover;\n        }\n      });\n      this.setState({\n        characters: characters_copy\n      });\n    };\n\n    this.generateNewCharacterOrder = character_array => {\n      // Example Data\n      // character_array = [{alt: '', src: '', clicked: bool}]\n      let new_character_order = []; // indices that have been chosen already\n\n      let index_tracker = [];\n      let max = 0; // Continue the loop while the max is less than or equal to character_array's length - 1\n\n      while (max <= character_array.length - 1) {\n        // Generates a random whole number between 0-8\n        let random_idx = Math.floor(Math.random() * 9); // if the index does not exist in index_tracker array then add it to index_tracker array\n\n        if (index_tracker.indexOf(random_idx) === -1) {\n          index_tracker = [...index_tracker, random_idx];\n          max++; // log('max: ', max)\n        }\n      } // log('length: ', index_tracker.length);\n      // log(`index tracker: ${index_tracker}`);\n\n\n      index_tracker.forEach(each_idx => new_character_order = [...new_character_order, character_array[each_idx]]);\n      this.setState({\n        characters: new_character_order\n      });\n    };\n\n    this.handleImageClick = characterClicked => {\n      log(\"Character: \".concat(characterClicked));\n      let character_images_copy = this.state.characters; // character_array = [{alt: '', src: '', clicked: bool}]\n\n      character_images_copy.forEach(char => {\n        // if char is the same as the character clicked and\n        // it has not been clicked yet then...\n        if (char.alt === characterClicked && char.clicked === false) {\n          // set the clicked value to true\n          char.clicked = true; // add one to the currentScore\n\n          this.setState({\n            currentScore: this.state.currentScore + 1\n          }, () => {\n            // if the topScore is less than the currentScore then\n            // set the value of the currentScore to the topScore\n            if (this.state.topScore < this.state.currentScore) {\n              // set the state of topScore to currentScore\n              this.setState({\n                topScore: this.state.currentScore\n              });\n            } // if currentScore is 9 then you've won the game!\n            // Ask user to play again\n\n\n            if (this.state.currentScore === 9) {\n              alert(\"You've won the game!\");\n            }\n          });\n        }\n      });\n      this.generateNewCharacterOrder(this.state.characters);\n    };\n  }\n\n  render() {\n    // this.generateNewCharacterOrder(this.state.characters);\n    return React.createElement(\"div\", {\n      className: \"app_container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(Col, {\n      lg: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(Header, {\n      topScore: this.state.topScore,\n      currentScore: this.state.currentScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Col, {\n      lg: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(Characters, {\n      characters: this.state.characters,\n      handleImageClick: char => this.handleImageClick(char),\n      toggleHover: x => this.toggleHover(x),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ChristinaGerard/Desktop/personal_projects/TrickyClicks/src/App.js"],"names":["React","Component","Row","Col","Container","Poca","JSmith","Meeko","Flit","GMWillow","PHatan","Nakoma","Percy","Kocoum","Header","Characters","log","console","App","state","characters","alt","src","clicked","hover","topScore","currentScore","toggleHover","character","characters_copy","forEach","char","setState","generateNewCharacterOrder","character_array","new_character_order","index_tracker","max","length","random_idx","Math","floor","random","indexOf","each_idx","handleImageClick","characterClicked","character_images_copy","alert","render","x"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Container } from 'react-bootstrap';\n\n// Character Images\nimport Poca from './images/characters/poca.jpg';\nimport JSmith from './images/characters/john_smith.jpg';\nimport Meeko from './images/characters/meeko.jpg';\nimport Flit from './images/characters/flit.jpg';\nimport GMWillow from './images/characters/gma_willow.jpg';\nimport PHatan from './images/characters/powhatan.jpg';\nimport Nakoma from './images/characters/nakoma.jpg';\nimport Percy from './images/characters/percy.jpg';\nimport Kocoum from './images/characters/kocoum.jpg';\n\n\nimport './App.css';\n\n// Components\nimport Header from './components/header';\nimport Characters from './components/characters';\n\nconst log = console.log;\n\nclass App extends Component {\n\n  state = {\n    characters: [\n      { alt: 'Pocahontas', src: Poca, clicked: false, hover: false },\n      { alt: 'John Smith', src: JSmith, clicked: false, hover: false },\n      { alt: 'Meeko', src: Meeko, clicked: false, hover: false },\n      { alt: 'Flit', src: Flit, clicked: false, hover: false },\n      { alt: 'Grandmother Willow', src: GMWillow, clicked: false, hover: false},\n      { alt: 'Powhatan', src: PHatan, clicked: false, hover: false },\n      { alt: 'Nakoma', src: Nakoma, clicked: false, hover: false },\n      { alt: 'Percy', src: Percy, clicked: false, hover: false },\n      { alt: 'Kocoum', src: Kocoum, clicked: false, hover: false },\n    ],\n    topScore: 0,\n    currentScore: 0,\n  }\n\n  toggleHover = (character) => {\n    let characters_copy = this.state.characters;\n\n    characters_copy.forEach(char => {\n      if (char.alt === character){\n        char.hover = !char.hover;\n      }\n    });\n\n    this.setState({\n      characters: characters_copy\n    });\n  }\n\n  generateNewCharacterOrder = character_array => {\n    // Example Data\n    // character_array = [{alt: '', src: '', clicked: bool}]\n    let new_character_order = [];\n\n    // indices that have been chosen already\n    let index_tracker = [];\n    let max = 0;\n\n    // Continue the loop while the max is less than or equal to character_array's length - 1\n    while(max <= (character_array.length - 1)){\n\n      // Generates a random whole number between 0-8\n      let random_idx = Math.floor(Math.random() * 9);\n\n      // if the index does not exist in index_tracker array then add it to index_tracker array\n      if(index_tracker.indexOf(random_idx) === -1){\n        index_tracker = [...index_tracker, random_idx];\n        max++;\n        // log('max: ', max)\n      }\n    }\n    \n    // log('length: ', index_tracker.length);\n    // log(`index tracker: ${index_tracker}`);\n    index_tracker.forEach(each_idx => new_character_order = [...new_character_order, character_array[each_idx]]);\n\n    this.setState({\n      characters: new_character_order\n    });\n  }\n\n  // Create a function that updates the state of the application for the score\n  // when an image is clicked\n  handleImageClick = characterClicked => {\n    log(`Character: ${characterClicked}`);\n\n    let character_images_copy = this.state.characters;\n\n    // character_array = [{alt: '', src: '', clicked: bool}]\n    character_images_copy.forEach(char => {\n      // if char is the same as the character clicked and\n      // it has not been clicked yet then...\n      if(char.alt === characterClicked && char.clicked === false){\n        // set the clicked value to true\n        char.clicked = true;\n\n        // add one to the currentScore\n        this.setState({\n          currentScore: this.state.currentScore + 1\n        }, () => {\n\n\n          // if the topScore is less than the currentScore then\n          // set the value of the currentScore to the topScore\n          if(this.state.topScore < this.state.currentScore){\n            // set the state of topScore to currentScore\n            this.setState({\n              topScore: this.state.currentScore\n            })\n          }\n\n          // if currentScore is 9 then you've won the game!\n          // Ask user to play again\n          if(this.state.currentScore === 9){\n            alert(`You've won the game!`);\n          }\n\n\n        });\n      }\n    });\n\n    this.generateNewCharacterOrder(this.state.characters);\n  }\n\n  render() {\n    // this.generateNewCharacterOrder(this.state.characters);\n\n    return (\n      <div className=\"app_container\">\n        <Container>\n          <Row>\n            <Col lg={12}>\n              <Header topScore={this.state.topScore} currentScore={this.state.currentScore}/>\n            </Col>\n          </Row>\n          <Row>\n            <Col lg={12}>\n              <Characters \n                characters={this.state.characters} \n                handleImageClick={char => this.handleImageClick(char)}\n                toggleHover={(x) => this.toggleHover(x)} \n              />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}