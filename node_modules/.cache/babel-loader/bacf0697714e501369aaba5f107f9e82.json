{"ast":null,"code":"var _jsxFileName = \"/Users/ChristinaGerard/Desktop/personal_projects/TrickyClicks/src/App.js\";\nimport React, { Component } from 'react';\nimport { Row, Col, Container, Modal, Button } from 'react-bootstrap'; // Character Images\n\nimport Poca from './images/characters/poca.jpg';\nimport JSmith from './images/characters/john_smith.jpg';\nimport Meeko from './images/characters/meeko.jpg';\nimport Flit from './images/characters/flit.jpg';\nimport GMWillow from './images/characters/gma_willow.jpg';\nimport PHatan from './images/characters/powhatan.jpg';\nimport Nakoma from './images/characters/nakoma.jpg';\nimport Percy from './images/characters/percy.jpg';\nimport Kocoum from './images/characters/kocoum.jpg';\nimport './App.css'; // Components\n\nimport Header from './components/header';\nimport Characters from './components/characters';\nimport ClickAlert from './components/click_alert';\nconst log = console.log;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      characters: [{\n        alt: 'Pocahontas',\n        src: Poca,\n        clicked: false,\n        hover: false\n      }, {\n        alt: 'John Smith',\n        src: JSmith,\n        clicked: false,\n        hover: false\n      }, {\n        alt: 'Meeko',\n        src: Meeko,\n        clicked: false,\n        hover: false\n      }, {\n        alt: 'Flit',\n        src: Flit,\n        clicked: false,\n        hover: false\n      }, {\n        alt: 'Grandmother Willow',\n        src: GMWillow,\n        clicked: false,\n        hover: false\n      }, {\n        alt: 'Powhatan',\n        src: PHatan,\n        clicked: false,\n        hover: false\n      }, {\n        alt: 'Nakoma',\n        src: Nakoma,\n        clicked: false,\n        hover: false\n      }, {\n        alt: 'Percy',\n        src: Percy,\n        clicked: false,\n        hover: false\n      }, {\n        alt: 'Kocoum',\n        src: Kocoum,\n        clicked: false,\n        hover: false\n      }],\n      topScore: 0,\n      currentScore: 0,\n      gameAlert: {\n        message: '',\n        variant: ''\n      },\n      showModal: false,\n      modalTitle: '',\n      modalBody: ''\n    };\n\n    this.modalContent = (title, body) => {\n      this.setState({\n        modalTitle: title,\n        modalBody: body,\n        showModal: true\n      });\n    };\n\n    this.toggleHover = character => {\n      // makes a copy of characters in state\n      let characters_copy = this.state.characters; // finds the character that the user is hovering on \n      // and updates the hover status\n\n      characters_copy.forEach(char => {\n        if (char.alt === character) {\n          char.hover = !char.hover;\n        }\n      }); // sets the new value of the characters' state for the updated value\n\n      this.setState({\n        characters: characters_copy\n      });\n    };\n\n    this.generateNewCharacterOrder = character_array => {\n      // Example Data\n      // character_array = [{alt: '', src: '', clicked: bool}]\n      let new_character_order = []; // indices that have been chosen already\n\n      let index_tracker = [];\n      let max = 0; // Continue the loop while the max is less than or equal to character_array's length - 1\n\n      while (max <= character_array.length - 1) {\n        // Generates a random whole number between 0-8\n        let random_idx = Math.floor(Math.random() * 9); // if the index does not exist in index_tracker array then add it to index_tracker array\n\n        if (index_tracker.indexOf(random_idx) === -1) {\n          index_tracker = [...index_tracker, random_idx];\n          max++; // log('max: ', max)\n        }\n      } // log('length: ', index_tracker.length);\n      // log(`index tracker: ${index_tracker}`);\n\n\n      index_tracker.forEach(each_idx => new_character_order = [...new_character_order, character_array[each_idx]]);\n      this.setState({\n        characters: new_character_order\n      });\n    };\n\n    this.handleImageClick = characterClicked => {\n      log(\"Character: \".concat(characterClicked)); // makes a copy of characters in state\n\n      let character_images_copy = this.state.characters; // character_array = [{alt: '', src: '', clicked: bool}]\n\n      character_images_copy.forEach(char => {\n        // if char is the same as the character clicked and\n        // it has not been clicked yet then...\n        char.hover = false;\n\n        if (char.alt === characterClicked && char.clicked === false) {\n          // set the clicked value to true\n          char.clicked = true; // add one to the currentScore\n\n          this.setState({\n            currentScore: this.state.currentScore + 1,\n            gameAlert: {\n              message: \"Correct!\",\n              variant: 'success'\n            }\n          }, () => {\n            // if the topScore is less than the currentScore then\n            // set the value of the currentScore to the topScore\n            if (this.state.topScore < this.state.currentScore) {\n              // set the state of topScore to currentScore\n              this.setState({\n                topScore: this.state.currentScore\n              });\n            } // if currentScore is 9 then you've won the game!\n            // Ask user to play again\n\n\n            if (this.state.topScore === 9 || this.state.currentScore === 9) {\n              this.setState({\n                gameAlert: {\n                  message: \"You've won the game!\",\n                  variant: 'success'\n                },\n                showModal: true,\n                modalTitle: \"Congrats!\",\n                modalBody: \"You've won the game.\"\n              });\n            }\n          }); // if character selected by the user and character has already been clicked then..\n          // do no increase score. Show alert message\n        } else if (char.alt === characterClicked && char.clicked === true) {\n          this.setState({\n            gameAlert: {\n              message: 'Incorrect!',\n              variant: 'danger'\n            }\n          });\n        }\n      });\n      this.generateNewCharacterOrder(this.state.characters);\n    };\n\n    this.handleClose = () => {\n      if (this.state.modalTitle !== 'Instructions') {\n        // create a copy of the characters in state\n        let characters_copy = this.state.characters; // set default values of characters back to original values\n\n        characters_copy.forEach(char => {\n          char.clicked = false;\n          char.hover = false;\n        });\n        this.setState({\n          showModal: false,\n          gameAlert: {\n            message: 'Game has restarted!',\n            variant: 'success'\n          },\n          topScore: 0,\n          currentScore: 0,\n          characters: characters_copy // modalTitle: 'Congrats!',\n          // modalBody: `You've won the game!`\n\n        }, () => {\n          this.generateNewCharacterOrder(this.state.characters);\n        });\n      } else {\n        this.setState({\n          showModal: false\n        });\n      }\n    };\n\n    this.modal = () => {\n      return React.createElement(Modal, {\n        show: this.state.showModal,\n        onHide: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(Modal.Header, {\n        closeButton: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(Modal.Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, this.state.modalTitle)), React.createElement(Modal.Body, {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, this.state.modalBody), React.createElement(Modal.Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"secondary\",\n        onClick: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, \"Close\")));\n    };\n  }\n\n  componentDidMount() {\n    this.modalContent(\"Instructions\", \"Click on a image one time to earn earn a point. If you click on an image more than once you will not gain a point.\");\n  }\n\n  render() {\n    return (// this.setState({\n      //   modalTitle: `Instructions`,\n      //   modalBody: `Click on a image one time to earn earn a point. If the image you has already been clicked you'll not earn any points.`,\n      //   showModal: true\n      // });\n      React.createElement(\"div\", {\n        className: \"app_container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, (this.state.showModal || this.state.topScore === 9 || this.state.currentScore === 9) && this.modal(), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, React.createElement(Col, {\n        lg: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, React.createElement(Header, {\n        topScore: this.state.topScore,\n        currentScore: this.state.currentScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, React.createElement(Col, {\n        lg: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, React.createElement(ClickAlert, {\n        gameAlert: this.state.gameAlert,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, React.createElement(Col, {\n        lg: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, React.createElement(Characters, {\n        characters: this.state.characters,\n        handleImageClick: char => this.handleImageClick(char),\n        toggleHover: x => this.toggleHover(x),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      })))))\n    );\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ChristinaGerard/Desktop/personal_projects/TrickyClicks/src/App.js"],"names":["React","Component","Row","Col","Container","Modal","Button","Poca","JSmith","Meeko","Flit","GMWillow","PHatan","Nakoma","Percy","Kocoum","Header","Characters","ClickAlert","log","console","App","state","characters","alt","src","clicked","hover","topScore","currentScore","gameAlert","message","variant","showModal","modalTitle","modalBody","modalContent","title","body","setState","toggleHover","character","characters_copy","forEach","char","generateNewCharacterOrder","character_array","new_character_order","index_tracker","max","length","random_idx","Math","floor","random","indexOf","each_idx","handleImageClick","characterClicked","character_images_copy","handleClose","modal","componentDidMount","render","x"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Container, Modal, Button } from 'react-bootstrap';\n\n// Character Images\nimport Poca from './images/characters/poca.jpg';\nimport JSmith from './images/characters/john_smith.jpg';\nimport Meeko from './images/characters/meeko.jpg';\nimport Flit from './images/characters/flit.jpg';\nimport GMWillow from './images/characters/gma_willow.jpg';\nimport PHatan from './images/characters/powhatan.jpg';\nimport Nakoma from './images/characters/nakoma.jpg';\nimport Percy from './images/characters/percy.jpg';\nimport Kocoum from './images/characters/kocoum.jpg';\n\n\nimport './App.css';\n\n// Components\nimport Header from './components/header';\nimport Characters from './components/characters';\nimport ClickAlert from './components/click_alert';\n\nconst log = console.log;\n\nclass App extends Component {\n\n  state = {\n    characters: [\n      { alt: 'Pocahontas', src: Poca, clicked: false, hover: false },\n      { alt: 'John Smith', src: JSmith, clicked: false, hover: false },\n      { alt: 'Meeko', src: Meeko, clicked: false, hover: false },\n      { alt: 'Flit', src: Flit, clicked: false, hover: false },\n      { alt: 'Grandmother Willow', src: GMWillow, clicked: false, hover: false },\n      { alt: 'Powhatan', src: PHatan, clicked: false, hover: false },\n      { alt: 'Nakoma', src: Nakoma, clicked: false, hover: false },\n      { alt: 'Percy', src: Percy, clicked: false, hover: false },\n      { alt: 'Kocoum', src: Kocoum, clicked: false, hover: false },\n    ],\n    topScore: 0,\n    currentScore: 0,\n    gameAlert: { message: '', variant: '' },\n    showModal: false,\n    modalTitle: '',\n    modalBody: ''\n  }\n\n  modalContent = (title, body) => {\n    this.setState({\n      modalTitle: title,\n      modalBody: body,\n      showModal: true\n    })\n  }\n\n  // Handles when a user hovers an image\n  toggleHover = (character) => {\n    // makes a copy of characters in state\n    let characters_copy = this.state.characters;\n\n    // finds the character that the user is hovering on \n    // and updates the hover status\n    characters_copy.forEach(char => {\n      if (char.alt === character) {\n        char.hover = !char.hover;\n      }\n    });\n\n    // sets the new value of the characters' state for the updated value\n    this.setState({\n      characters: characters_copy\n    });\n  }\n\n  // generates new character order when a user clicks on character\n  generateNewCharacterOrder = character_array => {\n    // Example Data\n    // character_array = [{alt: '', src: '', clicked: bool}]\n    let new_character_order = [];\n\n    // indices that have been chosen already\n    let index_tracker = [];\n    let max = 0;\n\n    // Continue the loop while the max is less than or equal to character_array's length - 1\n    while (max <= (character_array.length - 1)) {\n\n      // Generates a random whole number between 0-8\n      let random_idx = Math.floor(Math.random() * 9);\n\n      // if the index does not exist in index_tracker array then add it to index_tracker array\n      if (index_tracker.indexOf(random_idx) === -1) {\n        index_tracker = [...index_tracker, random_idx];\n        max++;\n        // log('max: ', max)\n      }\n    }\n\n    // log('length: ', index_tracker.length);\n    // log(`index tracker: ${index_tracker}`);\n    index_tracker.forEach(each_idx => new_character_order = [...new_character_order, character_array[each_idx]]);\n\n    this.setState({\n      characters: new_character_order\n    });\n  }\n\n  // Create a function that updates the state of the application for the score\n  // when an image is clicked\n  handleImageClick = characterClicked => {\n    log(`Character: ${characterClicked}`);\n\n    // makes a copy of characters in state\n    let character_images_copy = this.state.characters;\n\n    // character_array = [{alt: '', src: '', clicked: bool}]\n    character_images_copy.forEach(char => {\n      // if char is the same as the character clicked and\n      // it has not been clicked yet then...\n      char.hover = false;\n      if (char.alt === characterClicked && char.clicked === false) {\n        // set the clicked value to true\n        char.clicked = true;\n        \n\n        // add one to the currentScore\n        this.setState({\n          currentScore: this.state.currentScore + 1,\n          gameAlert: { message: `Correct!`, variant: 'success' }\n        }, () => {\n\n\n          // if the topScore is less than the currentScore then\n          // set the value of the currentScore to the topScore\n          if (this.state.topScore < this.state.currentScore) {\n            // set the state of topScore to currentScore\n            this.setState({\n              topScore: this.state.currentScore\n            })\n          }\n\n          // if currentScore is 9 then you've won the game!\n          // Ask user to play again\n          if (this.state.topScore === 9 || this.state.currentScore === 9) {\n            this.setState({\n              gameAlert: { message: `You've won the game!`, variant: 'success' },\n              showModal: true,\n              modalTitle: `Congrats!`,\n              modalBody: `You've won the game.`\n            });\n\n\n          }\n\n\n        });\n        // if character selected by the user and character has already been clicked then..\n        // do no increase score. Show alert message\n      } else if (char.alt === characterClicked && char.clicked === true) {\n        this.setState({\n          gameAlert: { message: 'Incorrect!', variant: 'danger' }\n        })\n      }\n    });\n\n    this.generateNewCharacterOrder(this.state.characters);\n  }\n\n  // closes modal & restarts game\n  handleClose = () => {\n    if (this.state.modalTitle !== 'Instructions') {\n      // create a copy of the characters in state\n      let characters_copy = this.state.characters;\n\n      // set default values of characters back to original values\n      characters_copy.forEach(char => {\n        char.clicked = false;\n        char.hover = false;\n      });\n\n      this.setState({\n        showModal: false,\n        gameAlert: { message: 'Game has restarted!', variant: 'success' },\n        topScore: 0,\n        currentScore: 0,\n        characters: characters_copy,\n        // modalTitle: 'Congrats!',\n        // modalBody: `You've won the game!`\n      }, () => {\n        this.generateNewCharacterOrder(this.state.characters);\n      });\n    } else {\n      this.setState({\n        showModal: false,\n      })\n    }\n\n\n\n  }\n\n  // Game modal\n  // This will only appear if you've won the game\n  // On close it will restart the game\n  modal = () => {\n    return (\n      <Modal show={this.state.showModal} onHide={this.handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>{this.state.modalTitle}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body className='text-center'>{this.state.modalBody}</Modal.Body>\n        {/* <Modal.Body className='text-center'>{`You've won the game!`}</Modal.Body> */}\n\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={this.handleClose}>\n            Close\n        </Button>\n        </Modal.Footer>\n      </Modal>\n    )\n  }\n\n  componentDidMount(){\n    this.modalContent(\n      `Instructions`,\n      `Click on a image one time to earn earn a point. If you click on an image more than once you will not gain a point.`\n    )\n  }\n\n  render() {\n    \n\n    return (\n      // this.setState({\n      //   modalTitle: `Instructions`,\n      //   modalBody: `Click on a image one time to earn earn a point. If the image you has already been clicked you'll not earn any points.`,\n      //   showModal: true\n      // });\n      <div className = \"app_container\">\n\n        <Container>\n          {(this.state.showModal || this.state.topScore === 9 || this.state.currentScore === 9) && this.modal()}\n\n          {/* Header */}\n          <Row>\n            <Col lg={12}>\n              <Header\n                topScore={this.state.topScore}\n                currentScore={this.state.currentScore}\n              />\n            </Col>\n          </Row>\n          {/* ClickAlert */}\n          <Row>\n            <Col lg={12}>\n              <ClickAlert\n                gameAlert={this.state.gameAlert}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col lg={12}>\n              <Characters\n                characters={this.state.characters}\n                handleImageClick={char => this.handleImageClick(char)}\n                toggleHover={(x) => this.toggleHover(x)}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </div >\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}